app {

  httpServer {
    port = 9000
    host = "0.0.0.0"

    initialSettings = {
      "headerTableSize": 4096,
      "initialWindowSize": 65535,
      "maxConcurrentStreams": 100,
      "maxFrameSize": 16384,
      "maxHeaderListSize": 2147483647,
      "pushEnabled": true
    }

    bodyHandler {
      bodyLimit = 100000
      uploadsDirectory = "file_uploads"
      mergeFormAttributes = false
      deleteUploadedFilesOnEnd = true
    }

    dispatcher {
      factory = "sz.scaffold.dispatchers.VertxWorkerPoolDispatcher"
    }

    networkOptions {
      // http://www.vants.org/?post=210
      tcpFastOpen = true
      // http://www.itdaan.com/blog/2017/11/08/18a176a9e1b6bca4a9cbe36b5070876c.html
      tcpCork = true
      // https://blog.csdn.net/bin_linux96/article/details/53141799
      tcpQuickAck = false
      // https://blog.csdn.net/u012398613/article/details/52317464
      reusePort = true
    }
  }

  vertx {
    // https://vertx.io/docs/#clustering
    // ClusterManager: 可选 Ignite, Zookeeper
    clusterManager = "Ignite"
  }

  profiler {
    api {
      enabled = false
      timeThreshold = 100   // 单位: ms
      excludeRoutes = []    // 需要排除掉的的 route 列表
    }
  }
}

redis {
  default {
    host = "127.0.0.1"
    port = 6379
    // this is connection timeout in ms
    timeout = 2000
    database = 0
    ssl = false
    //  password = ""
    level2 {
      cacheEnabled = false
      // 时间单位: 秒, 取值大于0时有效
      autoRefresh = 60
      expireAfterAccess = 0
      expireAfterWrite = 0
      expireVariably = 0
    }

    // 如果其他的 Redis 数据连接配置,没有指定pool配置, 则默认使用与 redis.default.pool 相同的配置
    pool {
      // 基本参数
      // GenericObjectPool 提供了后进先出(LIFO)与先进先出(FIFO)两种行为模式的池。
      // 默认为true，即当池中有空闲可用的对象时，调用borrowObject方法会返回最近（后进）的实例
      lifo = true
      // 当从池中获取资源或者将资源还回池中时 是否使用java.util.concurrent.locks.ReentrantLock.ReentrantLock 的公平锁机制,默认为false
      fairness = false

      // 数量控制参数
      // 链接池中最大连接数,默认为8
      maxTotal = 8
      // 链接池中最大空闲的连接数,默认也为8
      maxIdle = 8
      // 连接池中最少空闲的连接数,默认为0
      minIdle = 0

      // 超时参数
      // 当连接池资源耗尽时，等待时间，超出则抛异常，默认为-1即永不超时
      maxWaitMillis = 5000
      // 当这个值为true的时候，maxWaitMillis参数才能生效。为false的时候，当连接池没资源，则立马抛异常。默认为true
      blockWhenExhausted = true

      // test参数
      // 默认false，create的时候检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取
      testOnCreate = false
      // 默认false，borrow的时候检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取
      testOnBorrow = false
      // 默认false，return的时候检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取
      testOnReturn = false
      // 默认false，在evictor线程里头，当evictionPolicy.evict方法返回false时，而且testWhileIdle为true的时候则检测是否有效，如果无效则移除
      testWhileIdle = true

      // 驱逐检测参数
      // 空闲链接检测线程检测的周期，毫秒数。如果为负值，表示不运行检测线程。默认为-1
      timeBetweenEvictionRunsMillis = 30000
      // 在每次空闲连接回收器线程(如果有)运行时检查的连接数量，默认为3, 取-1时, 表示检查当前所有的idleObjects
      numTestsPerEvictionRun = -1
      // 连接空闲的最小时间，达到此值后空闲连接将可能会被移除
      minEvictableIdleTimeMillis = 30000
      // 连接空闲的最小时间，达到此值后空闲链接将会被移除，且保留minIdle个空闲连接数。默认为-1
      softMinEvictableIdleTimeMillis = 1800000
      // evict策略的类名，默认为org.apache.commons.pool2.impl.DefaultEvictionPolicy
      evictionPolicyClassName = "org.apache.commons.pool2.impl.DefaultEvictionPolicy"

      // 额外参数
      operationTimeout = 2000
    }

  }
}